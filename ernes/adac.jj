//*****************************************************************
// File:   adac.jj
// Author: ...........
// Date:   ...........
// Coms:   Un tutorial sobre el análisis léxico con javacc
//         https://javacc.github.io/javacc/tutorials/token-manager.html
//*****************************************************************

 options {
   IGNORE_CASE = false;
   COMMON_TOKEN_ACTION = false;
 }

PARSER_BEGIN(adac)
package traductor;

public class adac {
    public static void main(String[] args) {
    	adac parser;

    	try {
	    	if(args.length == 0) { //entrada desde stdin
				parser = new adac(System.in);
			}
			else { //entrada desde fichero en args[0]
	            parser = new adac(new java.io.FileInputStream(args[0])); 
			}
			parser.S(); //invoca símbolo inicial de la gramática
		}
		catch (java.io.FileNotFoundException e) {
			System.err.println ("Fichero " + args[0] + " no encontrado.");
		}
		catch (TokenMgrError e) {
        	System.err.println("LEX_ERROR: " + e.getMessage());
        }
        catch (ParseException e) {
        	System.err.println("SINT_ERROR: " + e.getMessage());
        } 
    }
}
PARSER_END(adac)
//------------ descripción del AL
SKIP :
{
   " "
|  "\n"
|  "\t"
|  "\r"
|  < COMMENT: "--"(~[])+"\n" > 
}

TOKEN :
{
  	
  	< #LETTER: (["a"-"z","A"-"Z"]) >
|	< #DIGIT: ["0"-"9"] >
| 	< #GBAJO: "_" >
|   < #PYC: ";" >
| 	< #TRUE: "true" >
|   < #FALSE: "false" >
| 	< #INT: "integer" >
| 	< #CHAR: "character" >
| 	< #BOOL: "boolean" >
| 	< #IF: "if" >
| 	< #WHILE: "while" >
| 	< #ARRAY: "["(< DIGIT >)+"]" >
| 	< #PROC: "procedure" >
| 	< #FUNC: "function" >
| 	< #VAL: "val" >
| 	< #REF: "ref" >
| 	< #varINT2: < INT >" "< ID >(< ARRAY >)?(", "< ID >(< ARRAY >)?)* >
| 	< #varCHAR2: < CHAR >" "< ID >(< ARRAY >)?(", "< ID >(< ARRAY >)?)* >
| 	< #varBOOL2: < BOOL >" "< ID >(< ARRAY >)?(", "< ID >(< ARRAY >)?)* >
| 	< #TYPE: (< INT >|< CHAR >|< BOOL >) >
| 	< #PARAMS: ((< VAL >|< REF >)" "(< varINT2 >|< varCHAR2 >|< varBOOL2 >))("; "(< VAL >|< REF >)" "(< varINT2 >|< varCHAR2 >|< varBOOL2 >))* > 
}

TOKEN :
{
 	< tBEGIN: "begin" >
 		{
 			//mostrar la información pedida
 		}
| 	< STRING: "\"" ("\\" ~[] | ~["\"","\\"] )* "\"" >
| 	< ID:< LETTER >((< GBAJO >)?(< LETTER >|< DIGIT >)+)* > { System.out.println("id"); }
|   < declareVAR: (< varINT2 >|< varCHAR2 >|< varBOOL2 >)< PYC > >
| 	< tPROC: < PROC >" "< ID >(" ("< PARAMS >")")?" is" >
| 	< tFUNC: < FUNC >" "< TYPE >" "< ID >" ("(< PARAMS >)?") is" >
}
//------------ Símbolo inicial de la gramática. Para análisis léxico no hace falta más
void S () : 
{

}
{
	( 
		< tBEGIN > | < declareVAR > | < ID > | < tFUNC > | < tPROC > | < STRING >
	)+
	< EOF >
}
