xd
//*****************************************************************
// File:   adac.jj
// Author: ...........
// Date:   ...........
// Coms:   Un tutorial sobre el análisis léxico con javacc
//         https://javacc.github.io/javacc/tutorials/token-manager.html
//*****************************************************************

 options {
   IGNORE_CASE = false;
   COMMON_TOKEN_ACTION = false;
 }

PARSER_BEGIN(adac)
package traductor;

public class adac {
    public static void main(String[] args) {
    	adac parser;

    	try {
	    	if(args.length == 0) { //entrada desde stdin
				parser = new adac(System.in);
			}
			else { //entrada desde fichero en args[0]
	            parser = new adac(new java.io.FileInputStream(args[0])); 
			}
			parser.S(); //invoca símbolo inicial de la gramática
		}
		catch (java.io.FileNotFoundException e) {
			System.err.println ("Fichero " + args[0] + " no encontrado.");
		}
		catch (TokenMgrError e) {
        	System.err.println("LEX_ERROR: " + e.getMessage());
        }
        catch (ParseException e) {
        	System.err.println("SINT_ERROR: " + e.getMessage());
        } 
    }
}
PARSER_END(adac)
//------------ descripción del AL
SKIP :
{
   " "
|  "\n"
|  "\t"
|  "\r"
|  < COMMENT: "--"(~[])+"\n" >
}

TOKEN :
{
 	< #LETTER: (["a"-"z","A"-"Z"]) >
|	< #DIGIT: ["0"-"9"] >
| 	< #GBAJO: "_" >
|   < #PYC: ";" >
| 	< #ID: (~tIF, ~tWHILE, ~tINT, ~tBOOL, ~tCHAR) >
| 	< #ID: ([((< LETTER >)+(< DIGIT >)*(< GBAJO >)?)*, ((< GBAJO >)(< LETTER >)+(< DIGIT >)*)*, ((< GBAJO >)(< LETTER >)*(< DIGIT >)+)*]) >
}

TOKEN :
{
 	< tBEGIN: "begin" >
 		{
 			//mostrar la información pedida
 		}
|   < tINT: "integer" >
|	< tBOOL: "boolean" >
|	< tCHAR: "character" >
|   < tIF: "if" >
|   < tWHILE: "while" >
| 	< varINT: (< tINT >)" "(< ID >)(< PYC >) | (< tINT >)" "((< ID >)", ")+(< ID >)(< PYC >) >
|   < varCHAR: (< tCHAR >)" ""'"(< ID >)"'"(< PYC >) | (< tCHAR >)" "((< ID >)", ")+(< ID >)(< PYC >) >
|   < varBOOL: (< tBOOL >)" "(< ID >)(< PYC >) | (< tBOOL >)" "((< ID >)", ")+(< ID >)(< PYC >) >
}
//------------ Símbolo inicial de la gramática. Para análisis léxico no hace falta más
void S () : 
{

}
{
	( 
		< tBEGIN > | < tBOOL > | < tCHAR >
	)+
	< EOF >
}
